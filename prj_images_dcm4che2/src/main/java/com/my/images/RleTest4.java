package com.my.images;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RleTest4
{
    public static void main(String[] args)
    {
        RleTest4.test1();
        // RleTest4.test2();
    }

    public static void test1()
    {
        /*@formatter:off*/
        //        byte[][] in = new byte[][]{
        //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
        //
        //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C'},
        //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C'},
        //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'C'},
        //                new byte[] { 'A', 'A', 'A', 'B', 'C'},
        //                new byte[] { 'A', 'A', 'B', 'C'},
        //
        //                new byte[] { 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
        //                new byte[] { 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
        //                new byte[] { 'A', 'B', 'B', 'C', 'C', 'C' },
        //                new byte[] { 'A', 'B', 'C', 'C', 'C' },
        //                new byte[] { 'A', 'B', 'C', 'C' },
        //
        //                new byte[] { 'A', 'B', 'C'},
        //                new byte[] { 'A', 'B' }
        //                //, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        //                //, new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, 0, 0, -68, -68, 0, 0, -68, -68, -68, -68, -68, -68, -68, 0, 0, 0, 0}
        //                ,
        //                new byte[] {
        //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //                        ,
        //                        0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
        //                }
        //                // , new byte[] { 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B' }
        //
        //        };

        byte[] inputBytes = new byte[] {
                //0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //,
                0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
        };
        /*@formatter:on*/

        byte[] out = new byte[200000];
        Rle rle = new Rle(out, 0, inputBytes, 0, 608);
        rle.doRun();

        for (int i = 0; i < 100; i++)
        {
            System.out.print(out[i] + ",");
        }
        System.out.println();
    }

    // public static void test2()
    // {
    // byte[] bs = RleTest4.readBytesFromFile();
    // RleTest4.doTest(bs, 512);
    // }
    //
    // public static void doTest(byte[] in, int lineWidth)
    // {
    // byte[] out = new byte[200000];
    // RleTest4.rle(out, in, lineWidth);
    // for (int i = 0; i < out.length; i++)
    // {
    // System.out.print(out[i] + " ");
    // }
    // System.out.println();
    // }
    //
    // public static void rle(byte[] out, byte[] inputBytes, int sizePerConversion)
    // {
    // int outStartOffset = 0;
    // int inStartOffset = 0;
    // while (true)
    // {
    // if (inStartOffset + sizePerConversion < inputBytes.length)
    // {
    // System.out.println("*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
    // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);
    //
    // // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
    // Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
    // outStartOffset = rle.doRun();
    // inStartOffset += sizePerConversion;
    // }
    // else if (inStartOffset + sizePerConversion == inputBytes.length)
    // {
    // System.out.println("*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
    // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);
    //
    // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
    // inStartOffset += sizePerConversion;
    //
    // break;
    // }
    // else
    // {
    // sizePerConversion = inputBytes.length - inStartOffset;
    //
    // System.out.println("*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
    // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);
    //
    // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
    // inStartOffset += sizePerConversion;
    // break;
    // }
    // }
    // }

    public static byte[] readBytesFromFile()
    {
        BufferedReader br = null;
        try
        {
            List<Byte> list = new ArrayList<Byte>();
            br = new BufferedReader(new FileReader("bytes.txt"));
            String line = br.readLine();
            while (line != null)
            {
                RleTest4.parseLine(line, list);
                line = br.readLine();
            }

            byte[] bs = new byte[list.size()];
            for (int i = 0; i < bs.length; i++)
            {
                bs[i] = list.get(i);
            }
            System.out.println("total bytes: " + bs.length);
            return bs;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (br != null)
            {
                try
                {
                    br.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }

        return null;

    }

    private static void parseLine(String line, List<Byte> list)
    {
        int cnt = 0;
        String[] strs = line.split(",");
        for (String string : strs)
        {
            if (!string.isEmpty())
            {
                byte b = Byte.parseByte(string);
                list.add(b);
                cnt++;
            }
        }
        System.out.println("line byte cnt: " + cnt);
    }

}
