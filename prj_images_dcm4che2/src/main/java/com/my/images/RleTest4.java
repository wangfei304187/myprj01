package com.my.images;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RleTest4
{
    public static void main(String[] args)
    {
        RleTest4.test1();
        // RleTest4.test2();
    }

    public static void test1()
    {
        /*@formatter:off*/
        byte[][] in = new byte[][]{
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'C'}, // *
                //                new byte[] { 'A', 'A', 'A', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'B', 'C'},
                //
                //                new byte[] { 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C' },
                //
                //                new byte[] { 'A', 'B', 'C'},
                //                new byte[] { 'A', 'B' }
                //, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                //, new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, 0, 0, -68, -68, 0, 0, -68, -68, -68, -68, -68, -68, -68, 0, 0, 0, 0}
                //                ,
                //                new byte[] {
                //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        ,
                //                        0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
                //                }

                //                new byte[] {
                //                        /*0,0,0,-68,-68, 0,0,0,0,-68,
                //                        -68,0,0,-68,-68,  0,0,0,0,0,
                //                        0,0,0,-68,-68,  0,0,0,0,-68,
                //                        0,0,0,0,0,  0,-68,-68,0,0,
                //                        0,0,0,-68,-68,  -68,0,0,-68,-68,
                //                        -68,0,0,-68,-68,  0,0,0,-68,-68,
                //                        0,0,0,-68,-68,0,0,0,-68,-68,
                //                        0,0,0,-68,-68,-68,0,0,-68,-68,
                //                        0,0,0,0,0, 0,-68,-68,0,0,
                //                        0,0,0,0,0, 0,0,0,0,0,
                //                        0,0,0,-68,-68,
                //
                //                        0,0,0,0,*/
                //
                //                        -68,
                //
                //                        0,0,0,-68,-68,0,0,0
                //                        /*,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,0,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,-68,-68,-68,0,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,0,0,0,0,0*/
                //                }

                //                new byte[] {
                //                        //                        0,0,0,-68,-68,0,-68,-68,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0
                //                        //                        ,
                //                        |-68,0,-68,|-68,0,|0,-68,0,0,0,|-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,0,0,-88,-88,0,-88,-88,0,0,0,0,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0
                //                }
                //
                //                //  -1,-68,-15,0,-3,-68,-4,0,|2,-68,0,-68,|1,-68,0|,(2,0,-68,0,-1,0,|-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-5,-68,-74,0,-4,
                //                //  -1,-68,-15,0,-3,-68,-4,0,|2,-68,0,-68,|1,-68,0|,(1,0,-68,-2,0,  |-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-5,-68,-74,0,-4,-68,

                new byte [] {
                        // L135
                        0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,40,31,24,14,10,21,28,35,42,39,36,34,32,35,38,40,40,41,40,39,35,32,24,18,11,8,12,26,40,44,47,46,45,42,42,43,41,37,36,36,36,38,38,29,18,11,8,4,6,12,18,28,39,45,46,48,45,39,37,40,44,46,45,44,35,26,19,18,17,19,24,27,27,21,11,9,11,11,16,24,35,39,38,36,36,36,36,37,43,47,50,43,39,34,32,32,33,33,28,21,15,15,17,20,24,30,34,39,43,39,35,31,28,28,28,27,28,29,27,24,23,23,22,23,24,27,31,36,40,44,41,38,35,33,29,28,27,25,26,28,27,25,24,24,25,27,27,26,26,27,25,25,30,32,35,35,36,38,40,44,46,48,49,50,51,52,48,45,41,39,37,35,35,33,32,33,34,34,37,39,42,43,43,43,44,44,44,44,43,42,41,41,40,41,41,40,42,43,43,44,44,44,42,41,40,37,36,36,36,36,35,34,33,33,34,35,37,38,40,42,44,46,47,48,48,52,54,54,54,54,54,55,54,52,51,52,50,48,46,45,43,41,41,40,40,40,39,36,36,38,41,42,45,48,48,52,56,60,59,58,56,54,52,51,49,49,47,43,41,39,38,36,34,34,36,39,40,40,40,40,40,41,41,40,44,48,50,53,55,53,49,42,38,32,33,36,39,41,44,44,43,43,43,38,31,24,17,14,10,9,8,11,15,18,20,19,18,17,16,16,16,16,21,29,36,42,41,37,33,32,33,36,40,38,38,39,33,24,16,10,8,7,6,6,7,9,16,21,24,25,25,29,36,45,44,37,29,28,30,35,37,41,41,32,23,17,10,4,5,7,9,15,21,20,20,20,26,30,31,28,24,24,25,31,36,39,
                        // cnt: 440
                        34,28,20,11,7,6,8,14,19,23,
                        26,31,34,35,31,28,26,24,27,32,
                        34,34,29,17,8, 10,12,20,26,27,
                        // cnt: 470
                        30,27,24,21,17,18,22,24,0,
                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                        0
                        ,
                        // L136
                        0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,40,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,43,41,39,36,32,23,14,10,9,14,28,40,45,51,48,43,41,45,48,43,37,33,34,36,36,36,30,20,12,8,5,6,10,15,25,37,44,47,50,46,40,38,41,44,47,46,44,41,32,23,19,19,17,19,23,30,26,20,9,6,8,11,17,27,36,39,38,36,36,36,38,40,42,45,46,40,36,33,32,33,34,35,30,22,14,9,13,15,18,23,29,36,44,43,38,32,26,24,26,27,26,27,26,26,25,26,27,26,25,24,25,29,34,38,42,44,43,38,34,31,31,31,29,27,26,24,25,29,29,28,27,24,24,24,24,24,22,20,20,22,26,31,35,38,40,42,46,48,48,47,46,45,45,46,47,48,47,44,43,39,38,38,37,36,35,32,30,29,27,26,27,32,35,35,36,36,37,40,40,41,43,46,46,46,45,45,47,46,44,44,44,46,48,46,44,42,41,41,41,40,40,42,42,42,41,42,42,42,40,38,38,36,35,32,31,29,28,27,27,29,33,36,41,44,45,47,51,52,54,56,55,54,54,55,55,53,53,52,52,50,48,46,44,40,40,41,40,40,40,39,38,38,36,36,39,40,40,40,42,43,44,47,50,51,51,50,48,46,41,38,39,37,36,38,39,43,45,47,50,48,41,34,29,22,17,14,11,9,10,14,18,22,23,22,20,20,19,17,16,16,22,29,37,43,40,36,33,32,34,36,39,40,40,38,32,27,22,16,10,5,4,5,7,9,13,17,22,25,28,32,38,45,48,42,37,32,33,32,35,41,46,40,30,22,15,9,4,6,7,11,17,20,21,20,22,26,32,30,29,27,24,24,30,37,38,35,32,20,10,6,6,8,14,20,21,25,30,33,35,32,28,27,25,27,30,33,33,29,18,9,10,12,19,26,28,31,29,25,22,18,17,22,24,24,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                }

                //                -------BEGIN Test---------
                //                RLE bytes:
                //                27,24,21,17,18,22,24,0,-127,0,-1,0,-15,44,-35,0,1,35,40,17,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,23,43,41,39,36,32,23,14,10,9,14,28,
                //                My Rle bytes: len=256000
                //                27,24,21,17,18,22,24,0,-127,0, 0,0, 1,0,44,-14,44,-35,0,1,35,40,17,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,23,43,41,39,36,32,23,14,10,

        };


        for (int i = 0; i < in.length; i++)
        {
            System.out.println("Case " + i + ", input len=" + in[i].length);
            RleTest4.doTest(in[i], 608);

            if (i % 5 == 0)
            {
                System.out.println();
            }
        }


        //        byte[] inputBytes = new byte[] {
        //                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //                ,
        //                0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
        //
        //                //                0,0,  -68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0,     0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68
        //
        //                // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //        };
        /*@formatter:on*/
        //
        // byte[] out = new byte[200000];
        // Rle rle = new Rle(out, 0, inputBytes, 0, 608);
        // // Rle rle = new Rle(out, 0, inputBytes, 0, 133); // total: 128 + 5
        // rle.doRun();
        //
        // for (int i = 0; i < 100; i++)
        // {
        // System.out.print(out[i] + ",");
        // }
        // System.out.println();
    }

    public static void test2()
    {
        byte[] bs = RleTest4.readBytesFromFile();
        RleTest4.doTest(bs, 608);
    }

    public static void doTest(byte[] in, int lineWidth)
    {
        byte[] out = new byte[200000];
        RleTest4.rle(out, in, lineWidth);
        for (int i = 0; i < out.length; i++)
        {
            if (i > 0 && i % 350 == 0)
            {
                System.out.println();
            }
            System.out.print(out[i] + ",");
        }
        System.out.println();
    }

    public static void rle(byte[] out, byte[] inputBytes, int sizePerConversion)
    {
        int outStartOffset = 0;
        int inStartOffset = 0;
        while (true)
        {
            if (inStartOffset + sizePerConversion < inputBytes.length)
            {
                // System.out.println("1.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
            }
            else if (inStartOffset + sizePerConversion == inputBytes.length)
            {
                // System.out.println("2.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;

                break;
            }
            else
            {
                sizePerConversion = inputBytes.length - inStartOffset;
                //
                // System.out.println("3.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
                break;
            }
        }
    }

    public static byte[] readBytesFromFile()
    {
        BufferedReader br = null;
        try
        {
            List<Byte> list = new ArrayList<Byte>();
            br = new BufferedReader(new FileReader("bytes.txt"));
            String line = br.readLine();
            while (line != null)
            {
                RleTest4.parseLine(line, list);
                line = br.readLine();
            }

            byte[] bs = new byte[list.size()];
            for (int i = 0; i < bs.length; i++)
            {
                bs[i] = list.get(i);
            }
            System.out.println("total bytes: " + bs.length);
            return bs;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (br != null)
            {
                try
                {
                    br.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }

        return null;

    }

    private static void parseLine(String line, List<Byte> list)
    {
        int cnt = 0;
        String[] strs = line.split(",");
        for (String string : strs)
        {
            if (!string.isEmpty())
            {
                byte b = Byte.parseByte(string);
                list.add(b);
                cnt++;
            }
        }
        // System.out.println("line byte cnt: " + cnt);
    }

}
