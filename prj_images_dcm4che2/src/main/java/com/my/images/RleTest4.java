package com.my.images;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RleTest4
{
    public static void main(String[] args)
    {
        RleTest4.test1();
        // RleTest4.test2();
    }

    public static void test1()
    {
        /*@formatter:off*/
        byte[][] in = new byte[][]{
                // new byte[] { 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'C'}, // *
                //                new byte[] { 'A', 'A', 'A', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'B', 'C'},
                //
                //                new byte[] { 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C' },
                //
                //                new byte[] { 'A', 'B', 'C'},
                //                new byte[] { 'A', 'B' }
                //                ,
                //                new byte[] {
                //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        ,
                //                        0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
                //                }

                //                new byte[] {
                //                        /*0,0,0,-68,-68, 0,0,0,0,-68,
                //                        -68,0,0,-68,-68,  0,0,0,0,0,
                //                        0,0,0,-68,-68,  0,0,0,0,-68,
                //                        0,0,0,0,0,  0,-68,-68,0,0,
                //                        0,0,0,-68,-68,  -68,0,0,-68,-68,
                //                        -68,0,0,-68,-68,  0,0,0,-68,-68,
                //                        0,0,0,-68,-68,0,0,0,-68,-68,
                //                        0,0,0,-68,-68,-68,0,0,-68,-68,
                //                        0,0,0,0,0, 0,-68,-68,0,0,
                //                        0,0,0,0,0, 0,0,0,0,0,
                //                        0,0,0,-68,-68,
                //
                //                        0,0,0,0,*/
                //
                //                        -68,
                //
                //                        0,0,0,-68,-68,0,0,0
                //                        /*,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,0,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,-68,-68,-68,0,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,0,0,0,0,0*/
                //                }

                //                // 1,0,-88,1,-88,0,-3,0,-1,-88
                //                new byte[] {
                //                        0,-88,-88,0,0,0,0,0,-88,-88
                //                }

                //                // output1: -2,-68,0,-68, 1,-68,0, 1,0,-68      ; output2: 6,-68,0,-68,-68,0,0,-68
                //                new byte[] {
                //                        -68, 0, -68, -68, 0, 0, -68
                //                }

                // 7,51,120,-125,-117,-96,-76,-72,-78,3,-78,-96,-110,0
                //                new byte[] {
                //                        51,120,-125,-117,-96,-76,-72,-78,-78,-96,-110,0
                //                }

                // output1: 31,1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                // output2: 15,1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,6,4,7,13,10,11,9,8,9,15,18,20,19,15,21,19,24
                // DO cut in '6,6' or not ?
                //                new byte[] {
                //                        1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                //                }

                //                new byte[] {
                //                        -7,-7,-8,-13,-14,-4,-9,-16,-4,-13,-14,-12,-5,-5,-3,1,2,2,-3,-1,5,3,1,6
                //                }


                // output1: -2,22,0,24,-3,23
                // output2: -2,22,1,24,23,-2,23
                //                new byte[] {
                //                        22,22,22,24,23,23,23,23
                //                },

                //                new byte[] {
                //                        // L33
                //                        //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,-7,-1,7,15,20,19,13,18,20,17,20,22,20,20,21,21,21,22,18,21,18,21,25,21,19,18,24,23,19,20,24,23,22,24,20,14,16,21,18,19,22,22,24,21,21,17,18,24,21,25,24,21,18,16,21,21,24,22,21,19,18,18,19,18,15,20,18,12,20,17,18,18,18,21,25,19,26,17,16,20,26,18,17,27,24,23,25,21,24,24,23,20,19,17,21,23,19,25,21,17,24,23,16,22,21,21,18,24,24,16,25,20,23,20,24,22,19,23,22,20,21,24,18,20,20,20,14,19,21,19,16,17,17,16,16,15,19,15,14,16,19,20,22,18,19,20,20,18,21,23,18,22,23,21,22,25,24,20,18,24,23,22,21,18,24,22,15,24,24,20,14,22,22,18,22,21,23,22,18,20,19,13,15,14,16,15,14,18,20,24,20,21,25,27,27,22,23,27,24,25,25,27,26,23,21,23,22,23,28,24,24,28,25,22,22,18,18,20,20,21,22,18,17,18,23,25,22,21,19,23,22,21,20,19,18,19,16,17,18,14,13,9,8,13,11,9,16,17,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        //                        ,
                //                        //                        // L34
                //                        //0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        //,
                //                        // encode for the first '0' only ?
                //                        0,-2,-9,-1,7,14,13,14,20,20,18,19,18,19,21,20,21,19,21,23,24,24,19,19,16,21,25,22,18,15,21,24,19,20,22,24,22,21,26,17,17,18,21,22,24,25,24,23,23,20,21,25,22,25,24,23,19,21,24,20,22,20,22,19,15,22,21,18,17,20,17,15,18,17,19,17,14,18,23,25,20,20,20,21,24,19,19,29,24,20,25,24,22,21,24,24,18,18,22,25,22,21,20,23,25,23,16,20,22,21,21,24,24,18,21,25,22,25,22,19,23,23,23,21,22,25,22,18,20,21,18,17,19,20,15,19,18,17,19,14,18,15,13,19,19,21,23,17,17,24,19,18,22,19,20,24,21,22,23,25,23,22,18,20,20,24,21,17,23,17,16,23,21,18,17,22,18,17,20,21,21,27,16,18,15,13,16,17,19,15,17,19,23,21,22,23,24,24,23,20,27,25,25,26,25,26,27,23,22,22,22,22,26,24,23,24,23,24,21,18,19,20,19,26,23,16,20,19,23,22,23,23,22,23,21,19,21,18,18,18,19,22,18,15,15,13,12,14,9,9,12,12,14,13,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                //                }


                // OFFIS: -127,48,-1*,48,127,41,27,18
                // My:    -127,48,127*,48,48,41,27,18,61,
                new byte[] {
                        48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,41,27,18,61,35,20,41,41,44,39,33,36,34,44,42,46,33,22,40,25,49,38,70,54,44,34,34,69,51,49,39,46,15,28,47,42,25,15,37,27,25,43,50,52,46,28,31,36,39,51,31,24,28,40,32,61,39,36,47,45,55,79,122,-126,117,115,111,-121,-105,-80,-90,124,79,64,38,29,62,84,59,64,73,68,112,-62,5,44,66,60,50,2,-34,-71,-104,-128,105,106,115,110,124,-117,-111,-120,-104,124,-106,-100,-111,-117,-96,-110,-88,-107,-117,-120,-101,-100,-108,-90,-122,126,-126,-63,37,79,50,13,13,3,-30,-35,-5,-24,-13,0,-2,-11,-4,13,-12,-26,-9,-15,0,-15,-16,-71,-86,-87,-77,-84,-93,-110,126,-90,-123,119,114,121,101,119,126,127,-99,-73,-40,-2,-7,14,4,10,-13,-7,2,2,-13,-27,-6,34,4,-17,-45,-29,-21,-28,13,2,12,29,1,-22,-50,-56,-78,-91,-110,-105,-104,-95,-94,-69,-69,-74,-49,-54,-45,-17,1,0,-17,-14,21,12,23,20,30,43,63,-9,-44,-33,-35,-41,-58,-65,-87,-108,-81,-69,-68,-44,-20,38,80,98,75,67,86,109,62,9,24,93,101,115,-117,110,93,68,12,-40,-121,97,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48

                },

                // OFFIS: -127,0,-99,0,55*,-7,-7,-8,-13,-14,-4,
                // My:    -127,0,-99,0,-1*,-7,53,-8,-13,-14,
                new byte[] {
                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-7,-7,-8,-13,-14,-4,-9,-16,-4,-13,-14,-12,-5,-5,-3,1,2,2,-3,-1,5,3,1,6,7,7,6,9,8,4,9,14,10,9,6,12,14,13,16,14,10,14,9,12,12,13,18,12,12,20,20,22,26,25,28,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

                }
        };


        for (int i = 0; i < in.length; i++)
        {
            System.out.println("Case " + i + ", input len=" + in[i].length);
            RleTest4.doTest(in[i], 512);

            if (i % 5 == 0)
            {
                System.out.println();
            }
        }


        //        byte[] inputBytes = new byte[] {
        //                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //                ,
        //                0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
        //
        //                //                0,0,  -68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0,     0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68
        //
        //                // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //        };
        /*@formatter:on*/
        //
        // byte[] out = new byte[200000];
        // Rle rle = new Rle(out, 0, inputBytes, 0, 608);
        // // Rle rle = new Rle(out, 0, inputBytes, 0, 133); // total: 128 + 5
        // rle.doRun();
        //
        // for (int i = 0; i < 100; i++)
        // {
        // System.out.print(out[i] + ",");
        // }
        // System.out.println();
    }

    public static void test2()
    {
        byte[] bs = RleTest4.readBytesFromFile();
        RleTest4.doTest(bs, 512);
    }

    public static void doTest(byte[] in, int lineWidth)
    {
        byte[] out = new byte[600];
        RleTest4.rle(out, in, lineWidth);
        for (int i = 0; i < out.length; i++)
        {
            if (i > 0 && i % 350 == 0)
            {
                System.out.println();
            }
            System.out.print(out[i] + ",");
        }
        System.out.println();
    }

    public static void rle(byte[] out, byte[] inputBytes, int sizePerConversion)
    {
        int outStartOffset = 0;
        int inStartOffset = 0;
        while (true)
        {
            if (inStartOffset + sizePerConversion < inputBytes.length)
            {
                // System.out.println("1.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
            }
            else if (inStartOffset + sizePerConversion == inputBytes.length)
            {
                // System.out.println("2.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;

                break;
            }
            else
            {
                sizePerConversion = inputBytes.length - inStartOffset;
                //
                // System.out.println("3.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
                break;
            }
        }
    }

    public static byte[] readBytesFromFile()
    {
        BufferedReader br = null;
        try
        {
            List<Byte> list = new ArrayList<Byte>();
            br = new BufferedReader(new FileReader("bytes.txt"));
            String line = br.readLine();
            while (line != null)
            {
                RleTest4.parseLine(line, list);
                line = br.readLine();
            }

            byte[] bs = new byte[list.size()];
            for (int i = 0; i < bs.length; i++)
            {
                bs[i] = list.get(i);
            }
            System.out.println("total bytes: " + bs.length);
            return bs;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (br != null)
            {
                try
                {
                    br.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }

        return null;

    }

    private static void parseLine(String line, List<Byte> list)
    {
        int cnt = 0;
        String[] strs = line.split(",");
        for (String string : strs)
        {
            if (!string.isEmpty())
            {
                byte b = Byte.parseByte(string);
                list.add(b);
                cnt++;
            }
        }
        // System.out.println("line byte cnt: " + cnt);
    }

}
