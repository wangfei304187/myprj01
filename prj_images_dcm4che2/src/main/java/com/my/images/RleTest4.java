package com.my.images;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class RleTest4
{
    public static void main(String[] args)
    {
        RleTest4.test1();
        // RleTest4.test2();
    }

    public static void test1()
    {
        /*@formatter:off*/
        byte[][] in = new byte[][]{
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'A', 'B', 'B', 'C'}, // *
                //                new byte[] { 'A', 'A', 'A', 'B', 'C'},
                //                new byte[] { 'A', 'A', 'B', 'C'},
                //
                //                new byte[] { 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C', 'C' },
                //                new byte[] { 'A', 'B', 'C', 'C' },
                //
                //                new byte[] { 'A', 'B', 'C'},
                //                new byte[] { 'A', 'B' }
                //, new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
                //, new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -68, -68, 0, 0, 0, 0, -68, -68, 0, 0, -68, -68, -68, -68, -68, -68, -68, 0, 0, 0, 0}
                //                ,
                //                new byte[] {
                //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        ,
                //                        0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
                //                }

                //                new byte[] {
                //                        /*0,0,0,-68,-68, 0,0,0,0,-68,
                //                        -68,0,0,-68,-68,  0,0,0,0,0,
                //                        0,0,0,-68,-68,  0,0,0,0,-68,
                //                        0,0,0,0,0,  0,-68,-68,0,0,
                //                        0,0,0,-68,-68,  -68,0,0,-68,-68,
                //                        -68,0,0,-68,-68,  0,0,0,-68,-68,
                //                        0,0,0,-68,-68,0,0,0,-68,-68,
                //                        0,0,0,-68,-68,-68,0,0,-68,-68,
                //                        0,0,0,0,0, 0,-68,-68,0,0,
                //                        0,0,0,0,0, 0,0,0,0,0,
                //                        0,0,0,-68,-68,
                //
                //                        0,0,0,0,*/
                //
                //                        -68,
                //
                //                        0,0,0,-68,-68,0,0,0
                //                        /*,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,0,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,0,0,0,-68,-68,-68,0,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,0,0,0,-88,-88,0,-88,-88,0,0,0,0,0,0,0,0,0,0*/
                //                }

                //                new byte[] {
                //                        //                        0,0,0,-68,-68,0,-68,-68,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0
                //                        //                        ,
                //                        |-68,0,-68,|-68,0,|0,-68,0,0,0,|-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,0,-68,-68,0,0,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,0,0,-88,-88,0,-88,-88,0,0,0,0,0,0,0,0,-88,-88,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0
                //                }
                //
                //                //  -1,-68,-15,0,-3,-68,-4,0,|2,-68,0,-68,|1,-68,0|,(2,0,-68,0,-1,0,|-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-5,-68,-74,0,-4,
                //                //  -1,-68,-15,0,-3,-68,-4,0,|2,-68,0,-68,|1,-68,0|,(1,0,-68,-2,0,  |-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-1,-68,-2,0,-5,-68,-74,0,-4,-68,

                //                new byte [] {
                //                        // L135
                //                        0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,40,31,24,14,10,21,28,35,42,39,36,34,32,35,38,40,40,41,40,39,35,32,24,18,11,8,12,26,40,44,47,46,45,42,42,43,41,37,36,36,36,38,38,29,18,11,8,4,6,12,18,28,39,45,46,48,45,39,37,40,44,46,45,44,35,26,19,18,17,19,24,27,27,21,11,9,11,11,16,24,35,39,38,36,36,36,36,37,43,47,50,43,39,34,32,32,33,33,28,21,15,15,17,20,24,30,34,39,43,39,35,31,28,28,28,27,28,29,27,24,23,23,22,23,24,27,31,36,40,44,41,38,35,33,29,28,27,25,26,28,27,25,24,24,25,27,27,26,26,27,25,25,30,32,35,35,36,38,40,44,46,48,49,50,51,52,48,45,41,39,37,35,35,33,32,33,34,34,37,39,42,43,43,43,44,44,44,44,43,42,41,41,40,41,41,40,42,43,43,44,44,44,42,41,40,37,36,36,36,36,35,34,33,33,34,35,37,38,40,42,44,46,47,48,48,52,54,54,54,54,54,55,54,52,51,52,50,48,46,45,43,41,41,40,40,40,39,36,36,38,41,42,45,48,48,52,56,60,59,58,56,54,52,51,49,49,47,43,41,39,38,36,34,34,36,39,40,40,40,40,40,41,41,40,44,48,50,53,55,53,49,42,38,32,33,36,39,41,44,44,43,43,43,38,31,24,17,14,10,9,8,11,15,18,20,19,18,17,16,16,16,16,21,29,36,42,41,37,33,32,33,36,40,38,38,39,33,24,16,10,8,7,6,6,7,9,16,21,24,25,25,29,36,45,44,37,29,28,30,35,37,41,41,32,23,17,10,4,5,7,9,15,21,20,20,20,26,30,31,28,24,24,25,31,36,39,
                //                        // cnt: 440
                //                        34,28,20,11,7,6,8,14,19,23,
                //                        26,31,34,35,31,28,26,24,27,32,
                //                        34,34,29,17,8, 10,12,20,26,27,
                //                        // cnt: 470
                //                        30,27,24,21,17,18,22,24,0,
                //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                //                        0
                //                        //                        ,
                //                        //                        // L136
                //                        //                        0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,40,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,43,41,39,36,32,23,14,10,9,14,28,40,45,51,48,43,41,45,48,43,37,33,34,36,36,36,30,20,12,8,5,6,10,15,25,37,44,47,50,46,40,38,41,44,47,46,44,41,32,23,19,19,17,19,23,30,26,20,9,6,8,11,17,27,36,39,38,36,36,36,38,40,42,45,46,40,36,33,32,33,34,35,30,22,14,9,13,15,18,23,29,36,44,43,38,32,26,24,26,27,26,27,26,26,25,26,27,26,25,24,25,29,34,38,42,44,43,38,34,31,31,31,29,27,26,24,25,29,29,28,27,24,24,24,24,24,22,20,20,22,26,31,35,38,40,42,46,48,48,47,46,45,45,46,47,48,47,44,43,39,38,38,37,36,35,32,30,29,27,26,27,32,35,35,36,36,37,40,40,41,43,46,46,46,45,45,47,46,44,44,44,46,48,46,44,42,41,41,41,40,40,42,42,42,41,42,42,42,40,38,38,36,35,32,31,29,28,27,27,29,33,36,41,44,45,47,51,52,54,56,55,54,54,55,55,53,53,52,52,50,48,46,44,40,40,41,40,40,40,39,38,38,36,36,39,40,40,40,42,43,44,47,50,51,51,50,48,46,41,38,39,37,36,38,39,43,45,47,50,48,41,34,29,22,17,14,11,9,10,14,18,22,23,22,20,20,19,17,16,16,22,29,37,43,40,36,33,32,34,36,39,40,40,38,32,27,22,16,10,5,4,5,7,9,13,17,22,25,28,32,38,45,48,42,37,32,33,32,35,41,46,40,30,22,15,9,4,6,7,11,17,20,21,20,22,26,32,30,29,27,24,24,30,37,38,35,32,20,10,6,6,8,14,20,21,25,30,33,35,32,28,27,25,27,30,33,33,29,18,9,10,12,19,26,28,31,29,25,22,18,17,22,24,24,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                }

                //                -------BEGIN Test---------
                //                RLE bytes:
                //                27,24,21,17,18,22,24,0,-127,0,-1,0,-15,44,-35,0,1,35,40,17,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,23,43,41,39,36,32,23,14,10,9,14,28,
                //                My Rle bytes: len=256000
                //                27,24,21,17,18,22,24,0,-127,0, 0,0, 1,0,44,-14,44,-35,0,1,35,40,17,40,36,30,23,13,11,22,32,38,40,37,36,34,32,35,38,40,43,23,43,41,39,36,32,23,14,10,

                //                // 31,1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                //                new byte[]{
                //                        1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                //                },


                //                // 1,0,-88,1,-88,0,-3,0,-1,-88
                //                new byte[] {
                //                        0,-88,-88,0,0,0,0,0,-88,-88
                //                }

                //                // output1: -2,-68,0,-68, 1,-68,0, 1,0,-68      ; output2: 6,-68,0,-68,-68,0,0,-68
                //                new byte[] {
                //                        -68, 0, -68, -68, 0, 0, -68
                //                }

                // 7,51,120,-125,-117,-96,-76,-72,-78,3,-78,-96,-110,0
                //                new byte[] {
                //                        51,120,-125,-117,-96,-76,-72,-78,-78,-96,-110,0
                //                }

                // output1: 31,1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                // output2: 15,1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,6,4,7,13,10,11,9,8,9,15,18,20,19,15,21,19,24
                // DO cut in '6,6' or not ?
                //                new byte[] {
                //                        1,5,3,1,7,1,-2,-1,2,3,0,3,7,4,3,6,6,4,7,13,10,11,9,9,15,18,20,19,15,21,19,24
                //                }

                //                new byte[] {
                //                        -7,-7,-8,-13,-14,-4,-9,-16,-4,-13,-14,-12,-5,-5,-3,1,2,2,-3,-1,5,3,1,6
                //                }

                //                new byte[] {
                //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-2,3,13,18,13,15,17,18,17,17,19,18,23,22,15,20,21,22,23,17,20,21,25,23,20,19,21,22,22,22,16,20,19,19,22,21,23,23,21,22,22,16,18,22,27,22,20,23,23,22,21,24,21,21,19,19,21,18,21,18,20,18,18,17,18,17,20,11,20,19,20,19,22,20,24,22,23,20,19,22,24,21,22,23,22,23,19,17,21,17,20,21,20,22,18,22,25,21,21,24,27,19,15,19,23,20,24,18,21,20,21,24,22,19,16,23,21,23,22,19,16,15,18,17,16,22,18,11,15,21,19,18,16,16,16,15,20,21,20,19,21,18,20,19,22,24,21,21,21,21,25,22,24,19,20,21,23,23,25,18,22,26,18,20,28,26,20,20,22,20,20,17,23,18,18,14,17,19,13,13,17,19,19,17,21,27,26,20,20,22,26,27,25,26,24,
                //                        // C: 331
                //                        22,22,23,27,27,24,
                //                        // C: 337
                //                        22,22,22,|24,23,23,23,23,18,22,23,17,15,25,25,21,22,20,18,18,23,27,21,18,15,20,20,18,12,15,19,15,13,13,12,12,12,11,12,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        //                        ,
                //                        //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,-6,1,15,16,13,21,17,15,21,17,18,16,20,21,23,24,17,20,21,22,25,17,16,21,26,24,18,22,21,22,24,24,18,17,20,21,22,22,23,24,24,20,21,17,19,24,27,24,19,23,20,20,21,23,26,22,19,22,17,18,19,19,18,17,18,16,14,20,17,17,18,21,22,22,18,21,19,22,25,19,18,23,26,23,20,21,22,26,20,20,16,21,18,21,20,24,22,17,25,21,22,23,22,20,14,24,24,19,20,23,21,20,23,22,22,21,17,21,22,20,23,19,18,17,15,21,17,20,15,16,15,15,20,18,16,16,13,16,18,20,22,19,20,21,20,17,21,23,21,18,22,22,23,24,22,21,17,22,22,22,20,19,22,26,18,21,26,23,16,22,25,23,20,18,26,24,15,15,19,15,12,16,17,19,19,18,21,28,25,21,22,24,27,28,24,25,22,24,26,25,27,25,20,21,24,22,25,25,23,28,24,22,22,18,16,19,25,18,21,21,17,16,22,25,23,20,16,20,23,20,18,17,19,21,18,15,14,14,11,8,8,11,15,15,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                //                }
                //
                //                // -127,0,-6,0,27,-4,-2,3,13,18,13,15,17,18,17,17,19,18,23,22,15,20,21,22,23,17,20,21,25,23,20,19,21,-2,22,101,16,20,19,19,22,21,23,23,21,22,22,16,18,22,27,22,20,23,23,22,21,24,21,21,19,19,21,18,21,18,20,18,18,17,18,17,20,11,20,19,20,19,22,20,24,22,23,20,19,22,24,21,22,23,22,23,19,17,21,17,20,21,20,22,18,22,25,21,21,24,27,19,15,19,23,20,24,18,21,20,21,24,22,19,16,23,21,23,22,19,16,15,18,17,16,22,18,11,15,21,19,18,-2,16,10,15,20,21,20,19,21,18,20,19,22,24,-3,21,50,25,22,24,19,20,21,23,23,25,18,22,26,18,20,28,26,20,20,22,20,20,17,23,18,18,14,17,19,13,13,17,19,19,17,21,27,26,20,20,22,26,27,25,26,24,22,22,23,27,27,24,
                //                //    -2,22,1,24,23,-2,23,25,18,22,23,17,15,25,25,21,22,20,18,18,23,27,21,18,15,20,20,18,12,15,19,15,13,13,-2,12,2,11,12,23,-127,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                //
                //
                //                //                RLE bytes:  ***start=5330
                //                //                        20,20,22,26,27,25,26,24,22,22,23,27,27,24,-2,22,|0,24,-3,23,25,18,22,23,17,15,25,25,21,22,20,18,18,23,27,21,18,15,20,20,18,12,15,19,15,13,13,-2,12,2,11,12,23,-127,0,-6,0,-127,0,-4,0,127,-4,-6,1,15,16,13,21,17,
                //                //                        My Rle bytes: len=417424
                //                //                        20,20,22,26,27,25,26,24,22,22,23,27,27,24,-2,22,|1,24,23,-2,23,25,18,22,23,17,15,25,25,21,22,20,18,18,23,27,21,18,15,20,20,18,12,15,19,15,13,13,-2,12,2,11,12,23,-127,0,-6,0,-127,0,-4,0,127,-4,-6,1,15,16,13,21,
                //                //                        BEGIN compare, k=1.   rleBytes.length=417424


                // output1: -2,22,0,24,-3,23
                // output2: -2,22,1,24,23,-2,23
                //                new byte[] {
                //                        22,22,22,24,23,23,23,23
                //                },

                //                new byte[] {
                //                        // L33
                //                        //                        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,-7,-1,7,15,20,19,13,18,20,17,20,22,20,20,21,21,21,22,18,21,18,21,25,21,19,18,24,23,19,20,24,23,22,24,20,14,16,21,18,19,22,22,24,21,21,17,18,24,21,25,24,21,18,16,21,21,24,22,21,19,18,18,19,18,15,20,18,12,20,17,18,18,18,21,25,19,26,17,16,20,26,18,17,27,24,23,25,21,24,24,23,20,19,17,21,23,19,25,21,17,24,23,16,22,21,21,18,24,24,16,25,20,23,20,24,22,19,23,22,20,21,24,18,20,20,20,14,19,21,19,16,17,17,16,16,15,19,15,14,16,19,20,22,18,19,20,20,18,21,23,18,22,23,21,22,25,24,20,18,24,23,22,21,18,24,22,15,24,24,20,14,22,22,18,22,21,23,22,18,20,19,13,15,14,16,15,14,18,20,24,20,21,25,27,27,22,23,27,24,25,25,27,26,23,21,23,22,23,28,24,24,28,25,22,22,18,18,20,20,21,22,18,17,18,23,25,22,21,19,23,22,21,20,19,18,19,16,17,18,14,13,9,8,13,11,9,16,17,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        //                        ,
                //                        //                        // L34
                //                        //0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                //                        //,
                //                        // encode for the first '0' only ?
                //                        0,-2,-9,-1,7,14,13,14,20,20,18,19,18,19,21,20,21,19,21,23,24,24,19,19,16,21,25,22,18,15,21,24,19,20,22,24,22,21,26,17,17,18,21,22,24,25,24,23,23,20,21,25,22,25,24,23,19,21,24,20,22,20,22,19,15,22,21,18,17,20,17,15,18,17,19,17,14,18,23,25,20,20,20,21,24,19,19,29,24,20,25,24,22,21,24,24,18,18,22,25,22,21,20,23,25,23,16,20,22,21,21,24,24,18,21,25,22,25,22,19,23,23,23,21,22,25,22,18,20,21,18,17,19,20,15,19,18,17,19,14,18,15,13,19,19,21,23,17,17,24,19,18,22,19,20,24,21,22,23,25,23,22,18,20,20,24,21,17,23,17,16,23,21,18,17,22,18,17,20,21,21,27,16,18,15,13,16,17,19,15,17,19,23,21,22,23,24,24,23,20,27,25,25,26,25,26,27,23,22,22,22,22,26,24,23,24,23,24,21,18,19,20,19,26,23,16,20,19,23,22,23,23,22,23,21,19,21,18,18,18,19,22,18,15,15,13,12,14,9,9,12,12,14,13,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                //                }


                new byte[] {
                        48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,32,21,42,34,46,16,31,36,34,42,33,45,24,52,42,44,29,48,20,30,23,28,31,50,41,38,30,23,57,50,55,44,13,31,44,46,31,37,22,29,19,32,47,35,51,45,18,37,27,36,39,34,58,37,59,85,91,89,69,55,40,91,-102,-35,-31,-54,-78,-87,-58,-20,-17,-59,-112,83,65,33,59,94,90,94,75,65,73,-114,-31,42,42,44,34,20,-31,-42,-66,-101,-122,-128,-109,-99,-101,-92,-71,-76,-72,-66,-67,-51,-54,-48,-52,-41,-68,-26,-16,-19,-38,-16,-20,-41,-29,-23,-11,3,67,-122,-93,-123,82,95,114,116,86,106,119,-123,-113,115,95,94,-128,114,92,83,74,91,54,40,34,29,5,4,11,17,-3,-9,7,1,-23,-37,-31,-23,-28,-5,-7,7,8,37,41,49,62,62,67,53,64,89,106,91,84,93,72,45,41,53,55,71,106,105,101,100,100,98,67,54,45,73,56,53,38,35,51,53,54,76,93,78,77,81,106,-128,-126,115,103,-117,125,99,113,-124,123,111,112,68,46,44,22,12,5,1,-39,-52,-18,-5,-46,-48,9,78,74,64,70,75,81,46,23,27,66,70,62,113,94,67,30,-21,-67,119,73,69,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48
                        ,
                        48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,20,57,26,21,60,28,20,47,30,29,27,22,33,35,57,34,52,37,45,33,26,30,28,33,17,42,10,20,32,32,42,45,36,15,37,58,32,7,20,17,30,25,42,26,44,44,49,40,35,41,29,35,43,60,87,115,-98,-81,-79,-121,101,79,-99,-53,-17,1,-25,-45,-9,9,26,-6,-73,-121,98,76,57,77,98,-128,-127,90,71,99,-88,-9,40,41,32,6,-22,-27,-26,-35,-71,-70,-56,-49,-21,0,9,21,24,14,20,54,59,57,78,97,115,85,105,108,-116,-108,-116,127,-118,-120,-120,-92,-80,-8,44,23,2,-25,-21,9,38,21,17,36,42,34,16,28,-12,9,15,-17,-15,-26,-33,-54,-47,-66,-43,-48,-51,-74,-58,-50,-61,-87,-80,-81,-72,-103,-86,-78,-77,-64,-57,-86,-36,-57,-70,-30,-27,-30,-45,-50,-51,2,9,-6,-26,-66,-46,-27,-25,-23,-10,-4,-13,-12,-11,-26,1,13,-12,-15,16,31,12,6,7,-12,-7,-6,15,31,14,20,17,16,38,66,60,38,30,21,35,22,21,-6,1,19,-12,-58,-61,-67,-76,-100,-118,-121,103,111,68,54,51,69,102,95,127,108,93,72,60,48,17,25,33,31,46,24,4,-17,-55,-113,114,95,92,78,71,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,
                }

                //                115,-117,110,93,68,12,-40,-121,97,-127,48,-1,48,-127,48,0,48,127,32,21,42,34,46,16,31,36,34,42,33,45,24,52,42,44,29,48,20,30,23,28,31,50,41,38,30,23,57,50,55,44,13,31,44,46,31,37,22,29,19,32,47,35,51,45,18,37,27,36,39,34,
                //                My Rle bytes: len=420512
                //                115,-117,110,93,68,12,-40,-121,97,-127,48,-1,48,-127,48,127,48,32,21,42,34,46,16,31,36,34,42,33,45,24,52,42,44,29,48,20,30,23,28,31,50,41,38,30,23,57,50,55,44,13,31,44,46,31,37,22,29,19,32,47,35,51,45,18,37,27,36,39,34,58,
                //                -------END Test---------

                //                -127,48,127,48,32,21,42,34,46,16,31,36,34,42,33,45,24,52,42,44,29,48,20,30,23,28,31,50,41,38,30,23,57,50,55,44,13,31,44,46,31,37,22,29,19,32,47,35,51,45,18,37,27,36,39,34,58,37,59,85,91,89,69,55,40,91,-102,-35,-31,-54,-78,-87,-58,-20,-17,-59,-112,83,65,33,59,94,90,94,75,65,73,-114,-31,42,42,44,34,20,-31,-42,-66,-101,-122,-128,-109,-99,-101,-92,-71,-76,-72,-66,-67,-51,-54,-48,-52,-41,-68,-26,-16,-19,-38,-16,-20,-41,-29,-23,-11,3,67,-122,-93,-123,82,126,95,114,116,86,106,119,-123,-113,115,95,94,-128,114,92,83,74,91,54,40,34,29,5,4,11,17,-3,-9,7,1,-23,-37,-31,-23,-28,-5,-7,7,8,37,41,49,62,62,67,53,64,89,106,91,84,93,72,45,41,53,55,71,106,105,101,100,100,98,67,54,45,73,56,53,38,35,51,53,54,76,93,78,77,81,106,-128,-126,115,103,-117,125,99,113,-124,123,111,112,68,46,44,22,12,5,1,-39,-52,-18,-5,-46,-48,9,78,74,64,70,75,81,46,23,27,66,70,62,113,94,67,30,-21,-67,119,73,69,-127,48,0,48,-127,48,127,20,57,26,21,60,28,20,47,30,29,27,22,33,35,57,34,52,37,45,33,26,30,28,33,17,42,10,20,32,32,42,45,36,15,37,58,32,7,20,17,30,25,42,26,44,44,49,40,35,41,29,35,43,60,87,115,-98,-81,-79,-121,101,79,-99,-53,-17,1,-25,-45,-9,9,26,-6,-73,-121,98,76,57,77,98,-128,-127,90,71,99,
                //                -88,-9,40,41,32,6,-22,-27,-26,-35,-71,-70,-56,-49,-21,0,9,21,24,14,20,54,59,57,78,97,115,85,105,108,-116,-108,-116,127,-118,-120,-120,-92,-80,-8,44,23,2,-25,127,-21,9,38,21,17,36,42,34,16,28,-12,9,15,-17,-15,-26,-33,-54,-47,-66,-43,-48,-51,-74,-58,-50,-61,-87,-80,-81,-72,-103,-86,-78,-77,-64,-57,-86,-36,-57,-70,-30,-27,-30,-45,-50,-51,2,9,-6,-26,-66,-46,-27,-25,-23,-10,-4,-13,-12,-11,-26,1,13,-12,-15,16,31,12,6,7,-12,-7,-6,15,31,14,20,17,16,38,66,60,38,30,21,35,22,21,-6,1,19,-12,-58,-61,-67,-76,-100,-118,-121,103,111,68,54,51,69,102,95,127,108,93,72,60,48,17,25,33,31,46,24,4,-17,-55,-113,114,95,92,78,0,71,-126,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,

        };


        for (int i = 0; i < in.length; i++)
        {
            System.out.println("Case " + i + ", input len=" + in[i].length);
            RleTest4.doTest(in[i], 512);

            if (i % 5 == 0)
            {
                System.out.println();
            }
        }


        //        byte[] inputBytes = new byte[] {
        //                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //                ,
        //                0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,-68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0
        //
        //                //                0,0,  -68,0,0,0,0,0,0,-68,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,-68,-68,0,0,0,-68,-68,0,0,0,0,0,-68,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,-88,-88,0,0,0,0,0,0,0,0,0,0,0,0,-88,-88,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,-88,-88,0,0,0,0,0,0,-88,-88,-88,0,0,0,0,0,0,0,0,0,0,0,     0,0,0,-68,-68,0,0,0,0,-68,-68,0,0,-68,-68,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,0,0,0,0,-68,-68,-68,-68,-68,-68,-68,-68
        //
        //                // 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        //        };
        /*@formatter:on*/
        //
        // byte[] out = new byte[200000];
        // Rle rle = new Rle(out, 0, inputBytes, 0, 608);
        // // Rle rle = new Rle(out, 0, inputBytes, 0, 133); // total: 128 + 5
        // rle.doRun();
        //
        // for (int i = 0; i < 100; i++)
        // {
        // System.out.print(out[i] + ",");
        // }
        // System.out.println();
    }

    public static void test2()
    {
        byte[] bs = RleTest4.readBytesFromFile();
        RleTest4.doTest(bs, 512);
    }

    public static void doTest(byte[] in, int lineWidth)
    {
        byte[] out = new byte[200000];
        RleTest4.rle(out, in, lineWidth);
        for (int i = 0; i < out.length; i++)
        {
            if (i > 0 && i % 350 == 0)
            {
                System.out.println();
            }
            System.out.print(out[i] + ",");
        }
        System.out.println();
    }

    public static void rle(byte[] out, byte[] inputBytes, int sizePerConversion)
    {
        int outStartOffset = 0;
        int inStartOffset = 0;
        while (true)
        {
            if (inStartOffset + sizePerConversion < inputBytes.length)
            {
                // System.out.println("1.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                // outStartOffset = RleTest4.rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
            }
            else if (inStartOffset + sizePerConversion == inputBytes.length)
            {
                // System.out.println("2.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;

                break;
            }
            else
            {
                sizePerConversion = inputBytes.length - inStartOffset;
                //
                // System.out.println("3.*** outStartOffset=" + outStartOffset + ", inStartOffset=" + inStartOffset
                // + ", sizePerConversion=" + sizePerConversion + ", inputBytes.length=" + inputBytes.length);

                Rle rle = new Rle(out, outStartOffset, inputBytes, inStartOffset, sizePerConversion);
                outStartOffset = rle.doRun();
                inStartOffset += sizePerConversion;
                break;
            }
        }
    }

    public static byte[] readBytesFromFile()
    {
        BufferedReader br = null;
        try
        {
            List<Byte> list = new ArrayList<Byte>();
            br = new BufferedReader(new FileReader("bytes.txt"));
            String line = br.readLine();
            while (line != null)
            {
                RleTest4.parseLine(line, list);
                line = br.readLine();
            }

            byte[] bs = new byte[list.size()];
            for (int i = 0; i < bs.length; i++)
            {
                bs[i] = list.get(i);
            }
            System.out.println("total bytes: " + bs.length);
            return bs;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            if (br != null)
            {
                try
                {
                    br.close();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }

        return null;

    }

    private static void parseLine(String line, List<Byte> list)
    {
        int cnt = 0;
        String[] strs = line.split(",");
        for (String string : strs)
        {
            if (!string.isEmpty())
            {
                byte b = Byte.parseByte(string);
                list.add(b);
                cnt++;
            }
        }
        // System.out.println("line byte cnt: " + cnt);
    }

}
